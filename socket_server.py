import socket
import threading
import json
import time
from crypto_utils import CryptoManager

class SecureMessageServer:
    def __init__(self, host='localhost', port=8888):
        self.host = host
        self.port = port
        self.crypto = CryptoManager()
        self.server_socket = None
        self.running = False
        self.logs = []
        self.clients = {}
        self.message_history = []  # L∆∞u to√†n b·ªô l·ªãch s·ª≠ tin nh·∫Øn
        
    def log(self, message, type='info', details=None):
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        log_entry = {
            'type': type,
            'message': message,
            'timestamp': timestamp,
            'details': details
        }
        self.logs.append(log_entry)
        print(f"[{timestamp}] {type.upper()}: {message}")
        
    def start_server(self):
        try:
            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.server_socket.bind((self.host, self.port))
            self.server_socket.listen(5)
            self.running = True

            self.log(f"üöÄ Secure Message Server ƒëang ch·∫°y t·∫°i {self.host}:{self.port}", 'success')

            while self.running:
                try:
                    self.server_socket.settimeout(1.0)
                    client_socket, address = self.server_socket.accept()
                    self.log(f"üì± K·∫øt n·ªëi t·ª´ {address}", 'info')

                    client_thread = threading.Thread(
                        target=self.handle_client,
                        args=(client_socket, address)
                    )
                    client_thread.daemon = True
                    client_thread.start()

                except socket.timeout:
                    continue
                except Exception as e:
                    if self.running:
                        self.log(f"‚ùå L·ªói server: {e}", 'error')
                        break
        except Exception as e:
            self.log(f"‚ùå L·ªói kh·ªüi ƒë·ªông server: {e}", 'error')
            self.running = False
                    
    def handle_client(self, client_socket, address):
        try:
            # Handshake
            message = client_socket.recv(1024).decode()
            if message == "Hello!":
                client_socket.send("Ready!".encode())
                self.log(f"‚úÖ Handshake th√†nh c√¥ng v·ªõi {address}", 'success')
            else:
                client_socket.send("Invalid handshake".encode())
                return
                
            # G·ª≠i public key
            public_key_pem = self.crypto.get_public_key_pem()
            client_socket.send(public_key_pem.encode())
            
            # X·ª≠ l√Ω y√™u c·∫ßu
            while True:
                try:
                    size_data = client_socket.recv(8).decode()
                    if not size_data:
                        break

                    data_size = int(size_data)
                    data = b''
                    while len(data) < data_size:
                        chunk = client_socket.recv(min(4096, data_size - len(data)))
                        if not chunk:
                            break
                        data += chunk

                    if len(data) != data_size:
                        break
                        
                    request = json.loads(data.decode())
                    
                    if request.get('type') == 'auth':
                        response = self.handle_auth(request, address)
                    elif request.get('type') == 'message':
                        response = self.handle_message(request, address)
                    else:
                        response = {'status': 'error', 'message': 'Lo·∫°i y√™u c·∫ßu kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£'}
                        
                    response_bytes = json.dumps(response).encode()
                    size = str(len(response_bytes)).zfill(8).encode()
                    client_socket.send(size)
                    client_socket.send(response_bytes)
                    
                    if request.get('type') == 'message':
                        break
                        
                except json.JSONDecodeError:
                    response = {'status': 'error', 'message': 'JSON kh√¥ng h·ª£p l·ªá'}
                    response_bytes = json.dumps(response).encode()
                    size = str(len(response_bytes)).zfill(8).encode()
                    client_socket.send(size)
                    client_socket.send(response_bytes)
                    break 
                except Exception as e:
                    response = {'status': 'error', 'message': str(e)}
                    response_bytes = json.dumps(response).encode()
                    size = str(len(response_bytes)).zfill(8).encode()
                    client_socket.send(size)
                    client_socket.send(response_bytes)
                    break 
        except Exception as e:
            self.log(f"‚ùå L·ªói x·ª≠ l√Ω client {address}: {e}", 'error')
        finally:
            client_socket.close()
            self.log(f"üîå ƒê√≥ng k·∫øt n·ªëi v·ªõi {address}", 'info')
            
    def handle_auth(self, request, address):
        try:
            signed_info = request['signed_info']
            encrypted_des_key = request['encrypted_des_key']
            client_id = request['client_id']
            client_public_key_pem = request.get('client_public_key')
            
            # X√°c th·ª±c ch·ªØ k√Ω ID b·∫±ng public key c·ªßa client
            if not self.crypto.verify_signature(client_id, signed_info, client_public_key_pem):
                self.log(f"‚ùå X√°c th·ª±c th·∫•t b·∫°i cho client {client_id}", 'error')
                return {'status': 'NACK', 'error': 'auth', 'message': 'Ch·ªØ k√Ω ID kh√¥ng h·ª£p l·ªá'}
                
            # Gi·∫£i m√£ kh√≥a DES
            try:
                self.crypto.decrypt_des_key(encrypted_des_key)
                self.log(f"‚úÖ Gi·∫£i m√£ kh√≥a DES th√†nh c√¥ng cho client {client_id}", 'success')
            except Exception as e:
                self.log(f"‚ùå Gi·∫£i m√£ kh√≥a DES th·∫•t b·∫°i: {e}", 'error')
                return {'status': 'NACK', 'error': 'key', 'message': 'Kh√¥ng th·ªÉ gi·∫£i m√£ kh√≥a DES'}
                
            # L∆∞u th√¥ng tin client
            self.clients[address] = {
                'id': client_id,
                'des_key': self.crypto.des_key if self.crypto.des_key else None,
                'client_public_key': client_public_key_pem
            }
            
            self.log(f"‚úÖ X√°c th·ª±c th√†nh c√¥ng cho client {client_id}", 'success')
            return {'status': 'ACK', 'message': 'X√°c th·ª±c th√†nh c√¥ng'}
            
        except Exception as e:
            self.log(f"‚ùå L·ªói x·ª≠ l√Ω x√°c th·ª±c: {e}", 'error')
            return {'status': 'NACK', 'error': 'server', 'message': str(e)}
            
    def handle_message(self, request, address):
        try:
            cipher = request['cipher']
            received_hash = request['hash']
            signature = request['sig']
            recipient_id = request.get('recipient_id', 'Server')
            timestamp = request.get('timestamp', 0)
            
            # Ki·ªÉm tra t√≠nh to√†n v·∫πn b·∫±ng SHA-256
            if not self.crypto.verify_integrity(cipher, received_hash):
                self.log(f"‚ùå Hash kh√¥ng kh·ªõp t·ª´ client {address}", 'error')
                return {'status': 'NACK', 'error': 'integrity', 'message': 'Hash kh√¥ng kh·ªõp'}
                
            # X√°c th·ª±c ch·ªØ k√Ω RSA b·∫±ng public key c·ªßa client
            client_public_key_pem = self.clients[address].get('client_public_key') if address in self.clients else None
            if not self.crypto.verify_signature(cipher, signature, client_public_key_pem):
                self.log(f"‚ùå Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá t·ª´ client {address}", 'error')
                return {'status': 'NACK', 'error': 'auth', 'message': 'Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá'}
                
            # Gi·∫£i m√£ tin nh·∫Øn (c·∫ßn IV t·ª´ message_packet)
            iv = request.get('iv')
            if iv:
                try:
                    decrypted_message = self.crypto.decrypt_text_des(iv, cipher)
                    self.log(f"‚úÖ Tin nh·∫Øn h·ª£p l·ªá t·ª´ client {address}: {decrypted_message}", 'success')
                    # L∆∞u l·∫°i message v√†o l·ªãch s·ª≠
                    msg = {
                        'decrypted_text': decrypted_message,
                        'sender_id': self.clients[address]['id'],
                        'timestamp': timestamp
                    }
                    self.message_history.append(msg)
                    return {
                        'status': 'ACK',
                        'message': 'Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c nh·∫≠n v√† x√°c th·ª±c th√†nh c√¥ng',
                        'timestamp': timestamp
                    }
                except Exception as e:
                    self.log(f"‚ùå L·ªói gi·∫£i m√£ tin nh·∫Øn: {e}", 'error')
                    return {'status': 'NACK', 'error': 'decrypt', 'message': 'Kh√¥ng th·ªÉ gi·∫£i m√£ tin nh·∫Øn'}
            else:
                self.log(f"‚ùå Thi·∫øu IV ƒë·ªÉ gi·∫£i m√£ tin nh·∫Øn", 'error')
                return {'status': 'NACK', 'error': 'decrypt', 'message': 'Thi·∫øu IV ƒë·ªÉ gi·∫£i m√£'}
                
        except Exception as e:
            self.log(f"‚ùå L·ªói x·ª≠ l√Ω tin nh·∫Øn: {e}", 'error')
            return {'status': 'NACK', 'error': 'server', 'message': str(e)}
            
    def stop_server(self):
        self.running = False
        if self.server_socket:
            self.server_socket.close()
        self.log("üõë Server ƒë√£ ƒë∆∞·ª£c d·ª´ng", 'info')

# Alias ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©
SpotifyCloudServer = SecureMessageServer 